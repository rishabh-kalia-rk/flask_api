{
  "openapi": "3.0.3",
  "info": {
    "title": "Flask api - OpenAPI 3.0",
    "description": "This project involves the development of a comprehensive API that simplifies the creation, updating, and deletion of both stores and items. Additionally, it provides user management capabilities, allowing the creation of new users. This API is designed to optimize inventory control and enhance user registration processes for businesses and organizations.\n\n\n\nAlso Incorporating JWT authentication into your API enhances its security and ensures that only authorized users can access the some functionalities of items, as well as managing user accounts. This added layer of security boosts the overall reliability and trustworthiness of your API.\n\nSome useful links:\n- [The flask api repository](https://github.com/rishabh-kalia-rk/flask_api)",
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:5000"
    }
  ],
  "tags": [
    {
      "name": "item",
      "description": "Everything about Items"
    },
    {
      "name": "store",
      "description": "About store"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/items": {
      "get": {
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "tags": [
          "item"
        ],
        "summary": "To get list of all items.",
        "description": "To get the items, first need to get the token key using /auth and than add the token to authorization pop up.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/items"
                }
              }
            }
          },
          "404": {
            "description": "Item not found"
          }
        }
      }
    },
    "/item/{name}": {
      "get": {
        "tags": [
          "item"
        ],
        "summary": "Find item by name",
        "description": "Returns a item",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of item to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          },
          "404": {
            "description": "item not found"
          }
        }
      },
      "post": {
        "tags": [
          "item"
        ],
        "summary": "Add new item",
        "description": "Add new item",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of item you want to add",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Body of request to add new item.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/item_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          },
          "409": {
            "description": "Item already present"
          },
          "500": {
            "description": "An error occured inserting the item"
          }
        }
      },
      "put": {
        "tags": [
          "item"
        ],
        "summary": "Add new item or update",
        "description": "Add new item or update item",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of item you want to add or update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Body of request to add new item or update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/item_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "item"
        ],
        "summary": "Delete a item",
        "description": "Add new item",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of item you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation, item deleted"
          },
          "400": {
            "description": "Item not found to delete"
          }
        }
      }
    },
    "/stores": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get all store",
        "description": "Returns all stores",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stores"
                }
              }
            }
          }
        }
      }
    },
    "/store/{name}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns store information.",
        "description": "Returns particular store information",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of store you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/store"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "store"
        ],
        "summary": "To add a new store",
        "operationId": "addstore",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the store you want to add.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/store"
                }
              }
            }
          },
          "409": {
            "description": "This named store already present"
          },
          "500": {
            "description": "An error occured while creating the store"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "To delete store",
        "description": "To delete particular store",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of store you want to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation, store deleted"
          },
          "409": {
            "description": "Store not found"
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "To register",
        "requestBody": {
          "description": "To register or create new user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user created successfully"
          },
          "409": {
            "description": "User already exist"
          }
        }
      }
    },
    "/auth": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "To get the JWT key for authentication.",
        "requestBody": {
          "description": "Data to add new item.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token key"
          }
        }
      }
    },
    "/user/{user_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find User by ID",
        "description": "Returns a user",
        "operationId": "getID",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of user you want to get information about.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 3
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "user not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "To delete a user",
        "description": "To delete a user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Id of user you want to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation, item deleted"
          },
          "404": {
            "description": "Item not found to delete"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "stores": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "name": {
              "type": "string",
              "example": "lake"
            },
            "item": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 1
                  },
                  "name": {
                    "type": "string",
                    "example": "hat"
                  },
                  "price": {
                    "type": "integer",
                    "example": 45
                  },
                  "store_id": {
                    "type": "integer",
                    "example": 1
                  }
                }
              }
            }
          }
        }
      },
      "store": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "house"
          },
          "item": {
            "type": "string",
            "example": []
          }
        }
      },
      "user": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "joy"
          }
        }
      },
      "items": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "hat"
                },
                "price": {
                  "type": "number",
                  "example": 45
                },
                "store_id": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        }
      },
      "item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 4
          },
          "name": {
            "type": "string",
            "example": "Palo"
          },
          "price": {
            "type": "number",
            "format": "float",
            "example": 45.6
          },
          "store_id": {
            "type": "integer",
            "example": 2
          }
        }
      },
      "item_request": {
        "type": "object",
        "properties": {
          "store_id": {
            "type": "integer",
            "format": "int64",
            "example": 4
          },
          "price": {
            "type": "number",
            "format": "float",
            "example": 45.7
          }
        }
      },
      "details": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "joy"
          },
          "password": {
            "type": "string",
            "example": "pass"
          }
        }
      }
    },
    "securitySchemes": {
      "JWTAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Enter your JWT token in the format 'Bearer YOUR_JWT_TOKEN'"
      }
    }
  },
  "security": [
    {
      "JWTAuth": []
    }
  ]
}